{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saqlain\\\\saqlain.in-v0\\\\src\\\\components\\\\Galaxy.jsx\",\n  _s = $RefreshSig$();\nimport { Renderer, Program, Mesh, Color, Triangle } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\nconst fragmentShader = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform bool uMouseAttraction;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5; \n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n      \n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n      \n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n  \n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0); // Center in UV space\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseAttraction) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 attraction = normalize(mousePosUV - uv) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += attraction * 0.05 * uMouseActiveFactor;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha); // Enhance contrast\n    alpha = min(alpha, 1.0); // Clamp to maximum 1.0\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\nexport default function Galaxy({\n  focal = [0.5, 0.5],\n  rotation = [1.0, 0.0],\n  starSpeed = 0.5,\n  density = 1,\n  hueShift = 140,\n  disableAnimation = false,\n  speed = 1.0,\n  mouseInteraction = true,\n  glowIntensity = 0.3,\n  saturation = 0.0,\n  mouseRepulsion = false,\n  mouseAttraction = true,\n  repulsionStrength = 2,\n  twinkleIntensity = 0.3,\n  rotationSpeed = 0.1,\n  autoCenterRepulsion = 0,\n  transparent = true,\n  ...rest\n}) {\n  _s();\n  const ctnDom = useRef(null);\n  const targetMousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const smoothMousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const targetMouseActive = useRef(0.0);\n  const smoothMouseActive = useRef(0.0);\n  useEffect(() => {\n    if (!ctnDom.current) return;\n    const ctn = ctnDom.current;\n    try {\n      const renderer = new Renderer({\n        alpha: transparent,\n        premultipliedAlpha: false\n      });\n      const gl = renderer.gl;\n      if (!gl) {\n        console.error('WebGL not supported');\n        return;\n      }\n      if (transparent) {\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        gl.clearColor(0, 0, 0, 0);\n      } else {\n        gl.clearColor(0, 0, 0, 1);\n      }\n      let program;\n      function resize() {\n        const scale = 1;\n        renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        if (program) {\n          program.uniforms.uResolution.value = new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height);\n        }\n      }\n      window.addEventListener(\"resize\", resize, false);\n      resize();\n      const geometry = new Triangle(gl);\n      program = new Program(gl, {\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n          uTime: {\n            value: 0\n          },\n          uResolution: {\n            value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n          },\n          uFocal: {\n            value: new Float32Array(focal)\n          },\n          uRotation: {\n            value: new Float32Array(rotation)\n          },\n          uStarSpeed: {\n            value: starSpeed\n          },\n          uDensity: {\n            value: density\n          },\n          uHueShift: {\n            value: hueShift\n          },\n          uSpeed: {\n            value: speed\n          },\n          uMouse: {\n            value: new Float32Array([smoothMousePos.current.x, smoothMousePos.current.y])\n          },\n          uGlowIntensity: {\n            value: glowIntensity\n          },\n          uSaturation: {\n            value: saturation\n          },\n          uMouseRepulsion: {\n            value: mouseRepulsion\n          },\n          uMouseAttraction: {\n            value: mouseAttraction\n          },\n          uTwinkleIntensity: {\n            value: twinkleIntensity\n          },\n          uRotationSpeed: {\n            value: rotationSpeed\n          },\n          uRepulsionStrength: {\n            value: repulsionStrength\n          },\n          uMouseActiveFactor: {\n            value: 0.0\n          },\n          uAutoCenterRepulsion: {\n            value: autoCenterRepulsion\n          },\n          uTransparent: {\n            value: transparent\n          }\n        }\n      });\n      const mesh = new Mesh(gl, {\n        geometry,\n        program\n      });\n      let animateId;\n      function update(t) {\n        animateId = requestAnimationFrame(update);\n        if (!disableAnimation) {\n          program.uniforms.uTime.value = t * 0.001;\n          program.uniforms.uStarSpeed.value = t * 0.001 * starSpeed / 10.0;\n        }\n        const lerpFactor = 0.05;\n        smoothMousePos.current.x += (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\n        smoothMousePos.current.y += (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\n        smoothMouseActive.current += (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\n        program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\n        program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\n        program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\n        renderer.render({\n          scene: mesh\n        });\n      }\n      animateId = requestAnimationFrame(update);\n      ctn.appendChild(gl.canvas);\n      function handleMouseMove(e) {\n        const rect = ctn.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = 1.0 - (e.clientY - rect.top) / rect.height;\n        targetMousePos.current = {\n          x,\n          y\n        };\n        targetMouseActive.current = 1.0;\n      }\n      function handleMouseLeave() {\n        targetMouseActive.current = 0.0;\n      }\n      if (mouseInteraction) {\n        ctn.addEventListener(\"mousemove\", handleMouseMove);\n        ctn.addEventListener(\"mouseleave\", handleMouseLeave);\n      }\n      return () => {\n        var _gl$getExtension;\n        cancelAnimationFrame(animateId);\n        window.removeEventListener(\"resize\", resize);\n        if (mouseInteraction) {\n          ctn.removeEventListener(\"mousemove\", handleMouseMove);\n          ctn.removeEventListener(\"mouseleave\", handleMouseLeave);\n        }\n        if (gl.canvas && ctn.contains(gl.canvas)) {\n          ctn.removeChild(gl.canvas);\n        }\n        (_gl$getExtension = gl.getExtension(\"WEBGL_lose_context\")) === null || _gl$getExtension === void 0 ? void 0 : _gl$getExtension.loseContext();\n      };\n    } catch (error) {\n      console.error('Galaxy WebGL Error:', error);\n      return () => {};\n    }\n  }, [focal, rotation, starSpeed, density, hueShift, disableAnimation, speed, mouseInteraction, glowIntensity, saturation, mouseRepulsion, mouseAttraction, twinkleIntensity, rotationSpeed, repulsionStrength, autoCenterRepulsion, transparent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ctnDom,\n    className: \"w-full h-full relative\",\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 10\n  }, this);\n}\n_s(Galaxy, \"3hfPn9KsixpKjSh0FStiZteKbyU=\");\n_c = Galaxy;\nvar _c;\n$RefreshReg$(_c, \"Galaxy\");","map":{"version":3,"names":["Renderer","Program","Mesh","Color","Triangle","useEffect","useRef","jsxDEV","_jsxDEV","vertexShader","fragmentShader","Galaxy","focal","rotation","starSpeed","density","hueShift","disableAnimation","speed","mouseInteraction","glowIntensity","saturation","mouseRepulsion","mouseAttraction","repulsionStrength","twinkleIntensity","rotationSpeed","autoCenterRepulsion","transparent","rest","_s","ctnDom","targetMousePos","x","y","smoothMousePos","targetMouseActive","smoothMouseActive","current","ctn","renderer","alpha","premultipliedAlpha","gl","console","error","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","program","resize","scale","setSize","offsetWidth","offsetHeight","uniforms","uResolution","value","canvas","width","height","window","addEventListener","geometry","vertex","fragment","uTime","uFocal","Float32Array","uRotation","uStarSpeed","uDensity","uHueShift","uSpeed","uMouse","uGlowIntensity","uSaturation","uMouseRepulsion","uMouseAttraction","uTwinkleIntensity","uRotationSpeed","uRepulsionStrength","uMouseActiveFactor","uAutoCenterRepulsion","uTransparent","mesh","animateId","update","t","requestAnimationFrame","lerpFactor","render","scene","appendChild","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseLeave","_gl$getExtension","cancelAnimationFrame","removeEventListener","contains","removeChild","getExtension","loseContext","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Saqlain/saqlain.in-v0/src/components/Galaxy.jsx"],"sourcesContent":["import { Renderer, Program, Mesh, Color, Triangle } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\n\nconst vertexShader = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\n\nconst fragmentShader = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform bool uMouseAttraction;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5; \n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n      \n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n      \n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n  \n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0); // Center in UV space\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseAttraction) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 attraction = normalize(mousePosUV - uv) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += attraction * 0.05 * uMouseActiveFactor;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha); // Enhance contrast\n    alpha = min(alpha, 1.0); // Clamp to maximum 1.0\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\n\nexport default function Galaxy({\n  focal = [0.5, 0.5],\n  rotation = [1.0, 0.0],\n  starSpeed = 0.5,\n  density = 1,\n  hueShift = 140,\n  disableAnimation = false,\n  speed = 1.0,\n  mouseInteraction = true,\n  glowIntensity = 0.3,\n  saturation = 0.0,\n  mouseRepulsion = false,\n  mouseAttraction = true,\n  repulsionStrength = 2,\n  twinkleIntensity = 0.3,\n  rotationSpeed = 0.1,\n  autoCenterRepulsion = 0,\n  transparent = true,\n  ...rest\n}) {\n  const ctnDom = useRef(null);\n  const targetMousePos = useRef({ x: 0.5, y: 0.5 });\n  const smoothMousePos = useRef({ x: 0.5, y: 0.5 });\n  const targetMouseActive = useRef(0.0);\n  const smoothMouseActive = useRef(0.0);\n\n  useEffect(() => {\n    if (!ctnDom.current) return;\n    const ctn = ctnDom.current;\n\n    try {\n      const renderer = new Renderer({\n        alpha: transparent,\n        premultipliedAlpha: false,\n      });\n      const gl = renderer.gl;\n\n      if (!gl) {\n        console.error('WebGL not supported');\n        return;\n      }\n\n    if (transparent) {\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clearColor(0, 0, 0, 0);\n    } else {\n      gl.clearColor(0, 0, 0, 1);\n    }\n\n    let program;\n\n    function resize() {\n      const scale = 1;\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n      if (program) {\n        program.uniforms.uResolution.value = new Color(\n          gl.canvas.width,\n          gl.canvas.height,\n          gl.canvas.width / gl.canvas.height\n        );\n      }\n    }\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n\n    const geometry = new Triangle(gl);\n    program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: {\n          value: new Color(\n            gl.canvas.width,\n            gl.canvas.height,\n            gl.canvas.width / gl.canvas.height\n          ),\n        },\n        uFocal: { value: new Float32Array(focal) },\n        uRotation: { value: new Float32Array(rotation) },\n        uStarSpeed: { value: starSpeed },\n        uDensity: { value: density },\n        uHueShift: { value: hueShift },\n        uSpeed: { value: speed },\n        uMouse: {\n          value: new Float32Array([\n            smoothMousePos.current.x,\n            smoothMousePos.current.y,\n          ]),\n        },\n        uGlowIntensity: { value: glowIntensity },\n        uSaturation: { value: saturation },\n        uMouseRepulsion: { value: mouseRepulsion },\n        uMouseAttraction: { value: mouseAttraction },\n        uTwinkleIntensity: { value: twinkleIntensity },\n        uRotationSpeed: { value: rotationSpeed },\n        uRepulsionStrength: { value: repulsionStrength },\n        uMouseActiveFactor: { value: 0.0 },\n        uAutoCenterRepulsion: { value: autoCenterRepulsion },\n        uTransparent: { value: transparent },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n    let animateId;\n\n    function update(t) {\n      animateId = requestAnimationFrame(update);\n      if (!disableAnimation) {\n        program.uniforms.uTime.value = t * 0.001;\n        program.uniforms.uStarSpeed.value = (t * 0.001 * starSpeed) / 10.0;\n      }\n\n      const lerpFactor = 0.05;\n      smoothMousePos.current.x +=\n        (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\n      smoothMousePos.current.y +=\n        (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\n\n      smoothMouseActive.current +=\n        (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\n\n      program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\n      program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\n      program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\n\n      renderer.render({ scene: mesh });\n    }\n    animateId = requestAnimationFrame(update);\n    ctn.appendChild(gl.canvas);\n\n    function handleMouseMove(e) {\n      const rect = ctn.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMousePos.current = { x, y };\n      targetMouseActive.current = 1.0;\n    }\n\n    function handleMouseLeave() {\n      targetMouseActive.current = 0.0;\n    }\n\n    if (mouseInteraction) {\n      ctn.addEventListener(\"mousemove\", handleMouseMove);\n      ctn.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n      return () => {\n        cancelAnimationFrame(animateId);\n        window.removeEventListener(\"resize\", resize);\n        if (mouseInteraction) {\n          ctn.removeEventListener(\"mousemove\", handleMouseMove);\n          ctn.removeEventListener(\"mouseleave\", handleMouseLeave);\n        }\n        if (gl.canvas && ctn.contains(gl.canvas)) {\n          ctn.removeChild(gl.canvas);\n        }\n        gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n      };\n    } catch (error) {\n      console.error('Galaxy WebGL Error:', error);\n      return () => {};\n    }\n  }, [\n    focal,\n    rotation,\n    starSpeed,\n    density,\n    hueShift,\n    disableAnimation,\n    speed,\n    mouseInteraction,\n    glowIntensity,\n    saturation,\n    mouseRepulsion,\n    mouseAttraction,\n    twinkleIntensity,\n    rotationSpeed,\n    repulsionStrength,\n    autoCenterRepulsion,\n    transparent,\n  ]);\n\n  return <div ref={ctnDom} className=\"w-full h-full relative\" {...rest} />;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}