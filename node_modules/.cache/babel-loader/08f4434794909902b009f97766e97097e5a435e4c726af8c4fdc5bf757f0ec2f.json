{"ast":null,"code":"import _objectSpread from\"C:/Users/Saqlain/saqlain.in-v0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Saqlain/saqlain.in-v0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"focal\",\"rotation\",\"starSpeed\",\"density\",\"hueShift\",\"disableAnimation\",\"speed\",\"mouseInteraction\",\"glowIntensity\",\"saturation\",\"mouseRepulsion\",\"mouseAttraction\",\"repulsionStrength\",\"twinkleIntensity\",\"rotationSpeed\",\"autoCenterRepulsion\",\"transparent\"];import{Renderer,Program,Mesh,Color,Triangle}from\"ogl\";import{useEffect,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const vertexShader=\"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  gl_Position = vec4(position, 0, 1);\\n}\\n\";const fragmentShader=\"\\nprecision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uResolution;\\nuniform vec2 uFocal;\\nuniform vec2 uRotation;\\nuniform float uStarSpeed;\\nuniform float uDensity;\\nuniform float uHueShift;\\nuniform float uSpeed;\\nuniform vec2 uMouse;\\nuniform float uGlowIntensity;\\nuniform float uSaturation;\\nuniform bool uMouseRepulsion;\\nuniform bool uMouseAttraction;\\nuniform float uTwinkleIntensity;\\nuniform float uRotationSpeed;\\nuniform float uRepulsionStrength;\\nuniform float uMouseActiveFactor;\\nuniform float uAutoCenterRepulsion;\\nuniform bool uTransparent;\\n\\nvarying vec2 vUv;\\n\\n#define NUM_LAYER 4.0\\n#define STAR_COLOR_CUTOFF 0.2\\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\\n#define PERIOD 3.0\\n\\nfloat Hash21(vec2 p) {\\n  p = fract(p * vec2(123.34, 456.21));\\n  p += dot(p, p + 45.32);\\n  return fract(p.x * p.y);\\n}\\n\\nfloat tri(float x) {\\n  return abs(fract(x) * 2.0 - 1.0);\\n}\\n\\nfloat tris(float x) {\\n  float t = fract(x);\\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\\n}\\n\\nfloat trisn(float x) {\\n  float t = fract(x);\\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\\n}\\n\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nfloat Star(vec2 uv, float flare) {\\n  float d = length(uv);\\n  float m = (0.05 * uGlowIntensity) / d;\\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\\n  m += rays * flare * uGlowIntensity;\\n  uv *= MAT45;\\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\\n  m += rays * 0.3 * flare * uGlowIntensity;\\n  m *= smoothstep(1.0, 0.2, d);\\n  return m;\\n}\\n\\nvec3 StarLayer(vec2 uv) {\\n  vec3 col = vec3(0.0);\\n\\n  vec2 gv = fract(uv) - 0.5; \\n  vec2 id = floor(uv);\\n\\n  for (int y = -1; y <= 1; y++) {\\n    for (int x = -1; x <= 1; x++) {\\n      vec2 offset = vec2(float(x), float(y));\\n      vec2 si = id + vec2(float(x), float(y));\\n      float seed = Hash21(si);\\n      float size = fract(seed * 345.32);\\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\\n\\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\\n      float grn = min(red, blu) * seed;\\n      vec3 base = vec3(red, grn, blu);\\n      \\n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\\n      hue = fract(hue + uHueShift / 360.0);\\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\\n      float val = max(max(base.r, base.g), base.b);\\n      base = hsv2rgb(vec3(hue, sat, val));\\n\\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\\n\\n      float star = Star(gv - offset - pad, flareSize);\\n      vec3 color = base;\\n\\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\\n      star *= twinkle;\\n      \\n      col += star * size * color;\\n    }\\n  }\\n\\n  return col;\\n}\\n\\nvoid main() {\\n  vec2 focalPx = uFocal * uResolution.xy;\\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\\n\\n  vec2 mouseNorm = uMouse - vec2(0.5);\\n  \\n  if (uAutoCenterRepulsion > 0.0) {\\n    vec2 centerUV = vec2(0.0, 0.0); // Center in UV space\\n    float centerDist = length(uv - centerUV);\\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\\n    uv += repulsion * 0.05;\\n  } else if (uMouseAttraction) {\\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\\n    float mouseDist = length(uv - mousePosUV);\\n    vec2 attraction = normalize(mousePosUV - uv) * (uRepulsionStrength / (mouseDist + 0.1));\\n    uv += attraction * 0.05 * uMouseActiveFactor;\\n  } else if (uMouseRepulsion) {\\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\\n    float mouseDist = length(uv - mousePosUV);\\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\\n    uv += repulsion * 0.05 * uMouseActiveFactor;\\n  } else {\\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\\n    uv += mouseOffset;\\n  }\\n\\n  float autoRotAngle = uTime * uRotationSpeed;\\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\\n  uv = autoRot * uv;\\n\\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\\n\\n  vec3 col = vec3(0.0);\\n\\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\\n    float depth = fract(i + uStarSpeed * uSpeed);\\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\\n    float fade = depth * smoothstep(1.0, 0.9, depth);\\n    col += StarLayer(uv * scale + i * 453.32) * fade;\\n  }\\n\\n  if (uTransparent) {\\n    float alpha = length(col);\\n    alpha = smoothstep(0.0, 0.3, alpha); // Enhance contrast\\n    alpha = min(alpha, 1.0); // Clamp to maximum 1.0\\n    gl_FragColor = vec4(col, alpha);\\n  } else {\\n    gl_FragColor = vec4(col, 1.0);\\n  }\\n}\\n\";export default function Galaxy(_ref){let{focal=[0.5,0.5],rotation=[1.0,0.0],starSpeed=0.5,density=1,hueShift=140,disableAnimation=false,speed=1.0,mouseInteraction=true,glowIntensity=0.3,saturation=0.0,mouseRepulsion=false,mouseAttraction=true,repulsionStrength=2,twinkleIntensity=0.3,rotationSpeed=0.1,autoCenterRepulsion=0,transparent=true}=_ref,rest=_objectWithoutProperties(_ref,_excluded);const ctnDom=useRef(null);const targetMousePos=useRef({x:0.5,y:0.5});const smoothMousePos=useRef({x:0.5,y:0.5});const targetMouseActive=useRef(0.0);const smoothMouseActive=useRef(0.0);useEffect(()=>{if(!ctnDom.current)return;const ctn=ctnDom.current;try{const renderer=new Renderer({alpha:transparent,premultipliedAlpha:false});const gl=renderer.gl;if(!gl){console.error('WebGL not supported');return;}if(transparent){gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);gl.clearColor(0,0,0,0);}else{gl.clearColor(0,0,0,1);}let program;function resize(){const scale=1;renderer.setSize(ctn.offsetWidth*scale,ctn.offsetHeight*scale);if(program){program.uniforms.uResolution.value=new Color(gl.canvas.width,gl.canvas.height,gl.canvas.width/gl.canvas.height);}}window.addEventListener(\"resize\",resize,false);resize();const geometry=new Triangle(gl);program=new Program(gl,{vertex:vertexShader,fragment:fragmentShader,uniforms:{uTime:{value:0},uResolution:{value:new Color(gl.canvas.width,gl.canvas.height,gl.canvas.width/gl.canvas.height)},uFocal:{value:new Float32Array(focal)},uRotation:{value:new Float32Array(rotation)},uStarSpeed:{value:starSpeed},uDensity:{value:density},uHueShift:{value:hueShift},uSpeed:{value:speed},uMouse:{value:new Float32Array([smoothMousePos.current.x,smoothMousePos.current.y])},uGlowIntensity:{value:glowIntensity},uSaturation:{value:saturation},uMouseRepulsion:{value:mouseRepulsion},uMouseAttraction:{value:mouseAttraction},uTwinkleIntensity:{value:twinkleIntensity},uRotationSpeed:{value:rotationSpeed},uRepulsionStrength:{value:repulsionStrength},uMouseActiveFactor:{value:0.0},uAutoCenterRepulsion:{value:autoCenterRepulsion},uTransparent:{value:transparent}}});const mesh=new Mesh(gl,{geometry,program});let animateId;function update(t){animateId=requestAnimationFrame(update);if(!disableAnimation){program.uniforms.uTime.value=t*0.001;program.uniforms.uStarSpeed.value=t*0.001*starSpeed/10.0;}const lerpFactor=0.05;smoothMousePos.current.x+=(targetMousePos.current.x-smoothMousePos.current.x)*lerpFactor;smoothMousePos.current.y+=(targetMousePos.current.y-smoothMousePos.current.y)*lerpFactor;smoothMouseActive.current+=(targetMouseActive.current-smoothMouseActive.current)*lerpFactor;program.uniforms.uMouse.value[0]=smoothMousePos.current.x;program.uniforms.uMouse.value[1]=smoothMousePos.current.y;program.uniforms.uMouseActiveFactor.value=smoothMouseActive.current;renderer.render({scene:mesh});}animateId=requestAnimationFrame(update);ctn.appendChild(gl.canvas);function handleMouseMove(e){const rect=ctn.getBoundingClientRect();const x=(e.clientX-rect.left)/rect.width;const y=1.0-(e.clientY-rect.top)/rect.height;targetMousePos.current={x,y};targetMouseActive.current=1.0;}function handleMouseLeave(){targetMouseActive.current=0.0;}if(mouseInteraction){ctn.addEventListener(\"mousemove\",handleMouseMove);ctn.addEventListener(\"mouseleave\",handleMouseLeave);}return()=>{var _gl$getExtension;cancelAnimationFrame(animateId);window.removeEventListener(\"resize\",resize);if(mouseInteraction){ctn.removeEventListener(\"mousemove\",handleMouseMove);ctn.removeEventListener(\"mouseleave\",handleMouseLeave);}if(gl.canvas&&ctn.contains(gl.canvas)){ctn.removeChild(gl.canvas);}(_gl$getExtension=gl.getExtension(\"WEBGL_lose_context\"))===null||_gl$getExtension===void 0?void 0:_gl$getExtension.loseContext();};}catch(error){console.error('Galaxy WebGL Error:',error);return()=>{};}},[focal,rotation,starSpeed,density,hueShift,disableAnimation,speed,mouseInteraction,glowIntensity,saturation,mouseRepulsion,mouseAttraction,twinkleIntensity,rotationSpeed,repulsionStrength,autoCenterRepulsion,transparent]);return/*#__PURE__*/_jsx(\"div\",_objectSpread({ref:ctnDom,className:\"w-full h-full relative\"},rest));}","map":{"version":3,"names":["Renderer","Program","Mesh","Color","Triangle","useEffect","useRef","jsx","_jsx","vertexShader","fragmentShader","Galaxy","_ref","focal","rotation","starSpeed","density","hueShift","disableAnimation","speed","mouseInteraction","glowIntensity","saturation","mouseRepulsion","mouseAttraction","repulsionStrength","twinkleIntensity","rotationSpeed","autoCenterRepulsion","transparent","rest","_objectWithoutProperties","_excluded","ctnDom","targetMousePos","x","y","smoothMousePos","targetMouseActive","smoothMouseActive","current","ctn","renderer","alpha","premultipliedAlpha","gl","console","error","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","program","resize","scale","setSize","offsetWidth","offsetHeight","uniforms","uResolution","value","canvas","width","height","window","addEventListener","geometry","vertex","fragment","uTime","uFocal","Float32Array","uRotation","uStarSpeed","uDensity","uHueShift","uSpeed","uMouse","uGlowIntensity","uSaturation","uMouseRepulsion","uMouseAttraction","uTwinkleIntensity","uRotationSpeed","uRepulsionStrength","uMouseActiveFactor","uAutoCenterRepulsion","uTransparent","mesh","animateId","update","t","requestAnimationFrame","lerpFactor","render","scene","appendChild","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseLeave","_gl$getExtension","cancelAnimationFrame","removeEventListener","contains","removeChild","getExtension","loseContext","_objectSpread","ref","className"],"sources":["C:/Users/Saqlain/saqlain.in-v0/src/components/Galaxy.jsx"],"sourcesContent":["import { Renderer, Program, Mesh, Color, Triangle } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\n\nconst vertexShader = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\n\nconst fragmentShader = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform bool uMouseAttraction;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5; \n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n      \n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n      \n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n  \n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0); // Center in UV space\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseAttraction) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 attraction = normalize(mousePosUV - uv) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += attraction * 0.05 * uMouseActiveFactor;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha); // Enhance contrast\n    alpha = min(alpha, 1.0); // Clamp to maximum 1.0\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\n\nexport default function Galaxy({\n  focal = [0.5, 0.5],\n  rotation = [1.0, 0.0],\n  starSpeed = 0.5,\n  density = 1,\n  hueShift = 140,\n  disableAnimation = false,\n  speed = 1.0,\n  mouseInteraction = true,\n  glowIntensity = 0.3,\n  saturation = 0.0,\n  mouseRepulsion = false,\n  mouseAttraction = true,\n  repulsionStrength = 2,\n  twinkleIntensity = 0.3,\n  rotationSpeed = 0.1,\n  autoCenterRepulsion = 0,\n  transparent = true,\n  ...rest\n}) {\n  const ctnDom = useRef(null);\n  const targetMousePos = useRef({ x: 0.5, y: 0.5 });\n  const smoothMousePos = useRef({ x: 0.5, y: 0.5 });\n  const targetMouseActive = useRef(0.0);\n  const smoothMouseActive = useRef(0.0);\n\n  useEffect(() => {\n    if (!ctnDom.current) return;\n    const ctn = ctnDom.current;\n\n    try {\n      const renderer = new Renderer({\n        alpha: transparent,\n        premultipliedAlpha: false,\n      });\n      const gl = renderer.gl;\n\n      if (!gl) {\n        console.error('WebGL not supported');\n        return;\n      }\n\n    if (transparent) {\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clearColor(0, 0, 0, 0);\n    } else {\n      gl.clearColor(0, 0, 0, 1);\n    }\n\n    let program;\n\n    function resize() {\n      const scale = 1;\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n      if (program) {\n        program.uniforms.uResolution.value = new Color(\n          gl.canvas.width,\n          gl.canvas.height,\n          gl.canvas.width / gl.canvas.height\n        );\n      }\n    }\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n\n    const geometry = new Triangle(gl);\n    program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: {\n          value: new Color(\n            gl.canvas.width,\n            gl.canvas.height,\n            gl.canvas.width / gl.canvas.height\n          ),\n        },\n        uFocal: { value: new Float32Array(focal) },\n        uRotation: { value: new Float32Array(rotation) },\n        uStarSpeed: { value: starSpeed },\n        uDensity: { value: density },\n        uHueShift: { value: hueShift },\n        uSpeed: { value: speed },\n        uMouse: {\n          value: new Float32Array([\n            smoothMousePos.current.x,\n            smoothMousePos.current.y,\n          ]),\n        },\n        uGlowIntensity: { value: glowIntensity },\n        uSaturation: { value: saturation },\n        uMouseRepulsion: { value: mouseRepulsion },\n        uMouseAttraction: { value: mouseAttraction },\n        uTwinkleIntensity: { value: twinkleIntensity },\n        uRotationSpeed: { value: rotationSpeed },\n        uRepulsionStrength: { value: repulsionStrength },\n        uMouseActiveFactor: { value: 0.0 },\n        uAutoCenterRepulsion: { value: autoCenterRepulsion },\n        uTransparent: { value: transparent },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n    let animateId;\n\n    function update(t) {\n      animateId = requestAnimationFrame(update);\n      if (!disableAnimation) {\n        program.uniforms.uTime.value = t * 0.001;\n        program.uniforms.uStarSpeed.value = (t * 0.001 * starSpeed) / 10.0;\n      }\n\n      const lerpFactor = 0.05;\n      smoothMousePos.current.x +=\n        (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\n      smoothMousePos.current.y +=\n        (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\n\n      smoothMouseActive.current +=\n        (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\n\n      program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\n      program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\n      program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\n\n      renderer.render({ scene: mesh });\n    }\n    animateId = requestAnimationFrame(update);\n    ctn.appendChild(gl.canvas);\n\n    function handleMouseMove(e) {\n      const rect = ctn.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMousePos.current = { x, y };\n      targetMouseActive.current = 1.0;\n    }\n\n    function handleMouseLeave() {\n      targetMouseActive.current = 0.0;\n    }\n\n    if (mouseInteraction) {\n      ctn.addEventListener(\"mousemove\", handleMouseMove);\n      ctn.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n      return () => {\n        cancelAnimationFrame(animateId);\n        window.removeEventListener(\"resize\", resize);\n        if (mouseInteraction) {\n          ctn.removeEventListener(\"mousemove\", handleMouseMove);\n          ctn.removeEventListener(\"mouseleave\", handleMouseLeave);\n        }\n        if (gl.canvas && ctn.contains(gl.canvas)) {\n          ctn.removeChild(gl.canvas);\n        }\n        gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n      };\n    } catch (error) {\n      console.error('Galaxy WebGL Error:', error);\n      return () => {};\n    }\n  }, [\n    focal,\n    rotation,\n    starSpeed,\n    density,\n    hueShift,\n    disableAnimation,\n    speed,\n    mouseInteraction,\n    glowIntensity,\n    saturation,\n    mouseRepulsion,\n    mouseAttraction,\n    twinkleIntensity,\n    rotationSpeed,\n    repulsionStrength,\n    autoCenterRepulsion,\n    transparent,\n  ]);\n\n  return <div ref={ctnDom} className=\"w-full h-full relative\" {...rest} />;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}